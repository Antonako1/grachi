<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="ATRC C-CPP Documentation">
    <title>ATRC Header File Documentation</title>
    <link rel="stylesheet" href="styles.css">
    </style>
</head>
<body>
    <header id="header">
        <h1>ATRC Header File Documentation, version 2.2.0</h1>
    </header>
    <nav>
        <ul>
            <li><a href="index.htm">Home</a></li>
            <li><a href="installation_guide.htm">Installation guide</a></li>
            <li><a href="api_reference.htm">API reference</a></li>
            <li><a href="https://github.com/Antonako1/ATRC" target="_blank">GitHub Project</a></li>
        </ul>
    </nav>
    <main>
        <section id="overview">
            <h2>Overview</h2>
            <p>This document provides an overview of the <code>ATRC</code> header file, detailing the constants, macros, data structures, functions, and the ATRC standard library. Both C and C++ declarations are supported.</p>
        </section>

        <section>
            <h2>Table of Contents</h2>
            <ul>
                <li>
                    <a href="#syntax">Syntax</a>
                    <ul>
                        <li><a href="#syntax_Header">Header</a></li>
                        <li><a href="#syntax_Insert">Insert/Inject marking</a></li>
                        <li><a href="#syntax_Reserved">Reserved characters</a></li>
                        <li><a href="#syntax_Comments">Comments</a></li>
                        <li><a href="#syntax_Variables">Variables</a></li>
                        <li><a href="#syntax_Blocks">Blocks</a></li>
                        <li><a href="#syntax_Keys">Keys</a></li>
                        <li><a href="#syntax_preprocessor">Preprocessor directives</a></li>
                    </ul>
                </li>
                <li>
                    <a href="#macros-and-constants">Macros and Constants</a>
                    <ul>
                        <li><a href="#ATRC_API">ATRC_API</a></li>
                        <li><a href="#FILEHEADER">FILEHEADER</a></li>
                    </ul>
                </li>
                <li>
                    <a href="#data-structures">Data Structures</a>
                    <ul>
                        <li>
                            Global declarations
                            <ul>
                                <li><a href="#ReadMode">ReadMode</a></li>
                            </ul>
                        </li>
                        <li>
                            C Declarations
                            <ul>
                                <li><a href="#C_Variable">C_Variable</a></li>
                                <li><a href="#_C_Variable_Arr">_C_Variable_Arr</a></li>
                                <li><a href="#C_Key">C_Key</a></li>
                                <li><a href="#C_Block">C_Block</a></li>
                                <li><a href="#_C_Block_Arr">_C_Block_Arr</a></li>
                                <li><a href="#_ATRCFiledata">_ATRCFiledata</a></li>
                            </ul>
                        </li>
                        <li>C++ Declarations
                            <ul>
                                <li><a href="#Variable">Variable</a></li>
                                <li><a href="#Key">Key</a></li>
                                <li><a href="#_Block">_Block</a></li>
                                <li><a href="#ATRC_FD">ATRC_FD</a></li>
                                <li><a href="#PROXY_ATRC_FD">PROXY_ATRC_FD</a></li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li>
                    <a href="#functions">Functions</a>
                    <ul>
                        <li>
                            <a href="#C_functions">C Functions</a>
                            <ul>
                                <li><a href="#C_Read">Read</a></li>
                                <li><a href="#C_ReadVariable">ReadVariable</a></li>
                                <li><a href="#C_ReadKey">ReadKey</a></li>
                                <li><a href="#C_DoesExistBlock">DoesExistBlock</a></li>
                                <li><a href="#C_DoesExistVariable">DoesExistVariable</a></li>
                                <li><a href="#C_DoesExistKey">DoesExistKey</a></li>
                                <li><a href="#C_IsPublic">IsPublic</a></li>
                                <li><a href="#C_InsertVar_S">InsertVar_S</a></li>
                                <li><a href="#C_AddBlock">AddBlock</a></li>
                                <li><a href="#C_RemoveBlock">RemoveBlock</a></li>
                                <li><a href="#C_AddVariable">AddVariable</a></li>
                                <li><a href="#C_RemoveVariable">RemoveVariable</a></li>
                                <li><a href="#C_ModifyVariable">ModifyVariable</a></li>
                                <li><a href="#C_AddKey">AddKey</a></li>
                                <li><a href="#C_RemoveKey">RemoveKey</a></li>
                                <li><a href="#C_ModifyKey">ModifyKey</a></li>
                                <li><a href="#C_Create_ATRC_FD">Create_ATRC_FD</a></li>
                                <li><a href="#C_Create_Empty_ATRC_FD">Create_Empty_ATRC_FD</a></li>
                                <li><a href="#C_Destroy_ATRC_FD_Blocks_And_Keys">Destroy_ATRC_FD_Blocks_And_Keys</a></li>
                                <li><a href="#C_Destroy_ATRC_FD_Variables">Destroy_ATRC_FD_Variables</a></li>
                                <li><a href="#C_Destroy_ATRC_FD">Destroy_ATRC_FD</a></li>
                            </ul>
                        </li>
                        <li>
                            <a href="#CPP_functions">C++ Member Functions</a>
                            <ul>
                                <li>
                                    <a href="#CPP_ATRC_FD">ATRC_FD</a>
                                    <ul>
                                        <li><a href="#ATRC_FD_Constructor1">Default constructor</a></li>
                                        <li><a href="#ATRC_FD_Constructor2">Constructor with file path</a></li>
                                        <li><a href="#ATRC_FD_Constructor3">Constructor with ATRC file data</a></li>
                                        <li><a href="#ATRC_FD_Destructor">Destructor</a></li>
                                        <li><a href="#ATRC_FD_Read">Read</a></li>
                                        <li><a href="#ATRC_FD_ReadVariable">ReadVariable</a></li>
                                        <li><a href="#ATRC_FD_ReadKey">ReadKey</a></li>
                                        <li><a href="#ATRC_FD_DoesExistBlock">DoesExistBlock</a></li>
                                        <li><a href="#ATRC_FD_DoesExistVariable">DoesExistVariable</a></li>
                                        <li><a href="#ATRC_FD_DoesExistKey">DoesExistKey</a></li>
                                        <li><a href="#ATRC_FD_IsPublic">IsPublic</a></li>
                                        <li><a href="#ATRC_FD_InsertVar">InsertVar</a></li>
                                        <li><a href="#ATRC_FD_InsertVar_S">InsertVar_S</a></li>
                                        <li><a href="#ATRC_FD_AddBlock">AddBlock</a></li>
                                        <li><a href="#ATRC_FD_RemoveBlock">RemoveBlock</a></li>
                                        <li><a href="#ATRC_FD_AddVariable">AddVariable</a></li>
                                        <li><a href="#ATRC_FD_RemoveVariable">RemoveVariable</a></li>
                                        <li><a href="#ATRC_FD_ModifyVariable">ModifyVariable</a></li>
                                        <li><a href="#ATRC_FD_AddKey">AddKey</a></li>
                                        <li><a href="#ATRC_FD_RemoveKey">RemoveKey</a></li>
                                        <li><a href="#ATRC_FD_ModifyKey">ModifyKey</a></li>
                                        <li><a href="#ATRC_FD_ToCStruct">ToCStruct</a></li>
                                        <li><a href="#ATRC_FD_CheckStatus">CheckStatus</a></li>
                                        <li><a href="#ATRC_FD_GetVariables">GetVariables</a></li>
                                        <li><a href="#ATRC_FD_GetBlocks">GetBlocks</a></li>
                                        <li><a href="#ATRC_FD_GetFilename">GetFilename</a></li>
                                        <li><a href="#ATRC_FD_GetAutoSave">GetAutoSave</a></li>
                                        <li><a href="#ATRC_FD_SetAutoSave">SetAutoSave</a></li>
                                        <li><a href="#ATRC_FD_GetWriteCheck">GetWriteCheck</a></li>
                                        <li><a href="#ATRC_FD_SetWriteCheck">SetWriteCheck</a></li>
                                        <li><a href="#ATRC_FD_operator_arr1">operator[]</a></li>
                                        <li><a href="#ATRC_FD_operator_arr2">operator[]</a></li>
                                    </ul>
                                    <a href="#PROXY_ATRC_FD">PROXY_ATRC_FD</a>
                                    <ul>
                                        <li><a href="#PROXY_ATRC_FD_Constructor">Constructor</a></li>
                                        <li><a href="#PROXY_ATRC_FD_operator_arr">operator[]</a></li>
                                        <li><a href="#PROXY_ATRC_FD_operator_str">operator std::string</a></li>
                                        <li><a href="#PROXY_ATRC_FD_operator_char">operator const char*</li>
                                        <li><a href="#PROXY_ATRC_FD_operator_assign">operator=</a></li>
                                        <li><a href="#PROXY_ATRC_FD_operator_rshift1">operator>></a></li>
                                        <li><a href="#PROXY_ATRC_FD_operator_rshift2">operator>></a></li>
                                        <li><a href="#PROXY_ATRC_FD_operator_insertion">operator<<</a></li>
                                    </ul>
                                </li>
                            </ul>
                            <ul>
                                <a href="#CPP_OPERATOR_HELP">Operator Overloading Helper Functions</a>
                                <ul>
                                    <li><a href="#CPP_OPERATOR_HELP_READING">Reading a value</a></li>
                                    <li><a href="#CPP_OPERATOR_HELP_ASSIGNING">Assigning a value</a></li>
                                    <li><a href="#CPP_OPERATOR_HELP_APPENDING">Appending a value</a></li>
                                    <li><a href="#CPP_OPERATOR_HELP_COUTING">Couting a value</a></li>
                                </ul>
                            </ul>

                        </li>
                    </ul>
                </li>

                <li>
                    <a href="#stdlib">ATRC Standard Library</a>
                    <ul>
                        <a href="#stdlib_data_structures">Data structures, enumerations, and global variables</a>
                        <li><a href="#stdlib_ATRC_ERR">ATRC_ERR</a></li>
                        <li><a href="#stdlib_atrc_stdlib_errval">atrc_stdlib_errval</a></li>
                        <li><a href="#stdlib__C_String_Arr">_C_String_Arr</a></li>
                    </ul>
                    <ul>
                        <a href="#stdlib_functions">Functions</a>
                        <li><a href="#stdlib_functions_atrc_to_vector">atrc_to_vector</a></li>
                        <li><a href="#stdlib_functions_atrc_to_list">atrc_to_list</a></li>
                        <li><a href="#stdlib_functions_atrc_free_list">stdlib_functions_atrc_free_list</a></li>
                        <li><a href="#stdlib_functions_atrc_to_bool">atrc_to_bool</a></li>
                        <li><a href="#stdlib_functions_atrc_to_uint64_t">atrc_to_uint64_t</a></li>
                        <li><a href="#stdlib_functions_atrc_to_int64_t">atrc_to_int64_t</a></li>
                        <li><a href="#stdlib_functions_atrc_to_double">atrc_to_double</a></li>
                    </ul>
                </li>
            </ul>
        </section>

        <section id="syntax">
            <h2>Syntax</h2>
            <p>No names can contain 
                <code>[</code>,
                <code>]</code>,
                <code>#</code>,
                <code>*</code>
            </p>
            <ul>
                <li id="syntax_Header">
                    <h3>Header</h3>
                    <p>
                        First row of the ATRC file must be <code>#!ATRC</code>, thus denoting the file as an ATRC file and the extension can be freely choosed.
                    </p>
                </li>
                <li id="syntax_Insert">
                    <h3>Insert/Inject marking</h3>
                    <p>
                        Insert/Inject marking is a way to inject variables into strings.
                    </p>
                    <ul>
                        <li>
                            <h4>%*%</h4>
                            <p>
                                Injects are placed left to right, from 0 to n.
                            </p>
                        </li>
                        <li>
                            <h4>%*[index]%</h4>
                            <p>
                                Injects are placed at the given index
                            </p>
                        </li>
                    </ul>
                    <h4>Examples</h4>
<pre><code>#!ATRC
[Block]
# Injects are: {"World", ",", "!"}
key=Hello%*% %*%%*%
# After injection, output is "HelloWorld ,!"

key2=Hello%*1% %*0%%*2%
# After injection, output is "Hello, World!"</code></pre>
</code></pre>
                <h4>Remarks</h4>
                <p>
                    See more: <a href="#C_InsertVar_S">C: InsertVar_S</a>,
                    <a href="#ATRC_FD_InsertVar">C++: InsertVar</a>
                    <a href="#ATRC_FD_InsertVar_S">C++: InsertVar_S</a>

                </p>
                </li>
                <li id="syntax_Reserved">
                    <h3>Reserved characters</h3>
                    <p>
                        Reserved characters are used for special purposes in ATRC files.
                    </p>
                    <ul>
                        <li>
                            <h4>#</h4>
                            <p>
                                Denotes a comment.
                                To use in a value, escape with a backslash. <code>\#</code>
                            </p>
                        </li>
                        <li>
                            <h4>%</h4>
                            <p>
                                Denotes start of an inject or variable.
                                To use in a value, escape with a backslash. <code>\%</code>
                            </p>
                        </li>
                        <li>
                            <h4>&</h4>
                            <p>
                                Denotes whitespace.
                                To use in a value, escape with a backslash. <code>\&</code>
                            </p>
<pre><code>#!ATRC
[block]
key=hello
# Outputs: "hello"

key=&hello&
# Outputs: " hello "
</code></pre>
                        </li>
                    </ul>
                </li>
                <li id="syntax_Comments">
                    <h3>Comments</h3>
                    <p>
                        Comments are denoted by a <code>#</code> character.
                    </p>
                </li>
                <li id="syntax_Variables">
                    <h3>Variables</h3>
                    <p>
                        Variables are defined as <code>%name%=value</code>.
                        The name cannot contain <code>*</code>.
                        All variables are constants.
                        Reference variables in values with <code>%name%</code>.
                    </p>
                    <h4>Example</h4>
<pre><code>#!ATRC
%name%=value
[block]
key=Reference to name: %name%</code></pre>
                </li>
                <li id="syntax_Blocks">
                    <h3>Blocks</h3>
                    <p>
                        Blocks are defined as <code>[name]</code>.
                        They contain keys.
                    </p>
                    <h4>Example</h4>
<pre><code>#!ATRC
[block]
key=value</code></pre>
                </li>
                <li id="syntax_Keys">
                    <h3>Keys</h3>
                    <p>
                        Keys are defined as <code>key=value</code>.
                        They are contained within blocks.
                    </p>
                    <h4>Example</h4>
<pre><code>#!ATRC
[block]
key=value</code></pre>
                </li>
                <li id="syntax_preprocessor">
                    <h3>Preprocessor directives</h3>
                    <p>
                        Preprocessor directives are currently under development.
                    </p>

                </li>
            </ul>
        </section>
        <section id="macros-and-constants">
            <h2>Macros and Constants</h2>
            <ul>
                <li id="ATRC_API"><code>ATRC_API</code>: Export/import macro for DLLs on Windows.</li>
                <li id="FILEHEADER"><code>FILEHEADER</code>: File header constant (<code>"#!ATRC"</code>).</li>
            </ul>
        </section>

        <section id="data-structures">
            <h2>Data Structures</h2>

            <h3>Global declarations</h3>
            <ul>
                <li id="ReadMode">
                    <h4>ReadMode</h4>
                    <p>
                        Enumeration for read modes.
                    </p>
<pre><code>typedef enum ReadMode {
    ATRC_READ_ONLY,
    ATRC_CREATE_READ,
    ATRC_FORCE_READ,
} ReadMode;</code></pre>
                <ul>
                    <li><code>ATRC_READ_ONLY</code>: Read from file.</li>
                    <li><code>ATRC_CREATE_READ</code>: Create file if it doesn't exist and read it.</li>
                    <li><code>ATRC_FORCE_READ</code>: Delete file if it exists, create it and read it.</li>
                </li>
                <h5>Remarks</h5>
                <p>
                    <a href="#FILEHEADER">FILEHEADER</a> is appended to the start of the file in <code>ATRC_CREATE_READ</code> and <code>ATRC_FORCE_READ</code>.
                </p>
            </ul>

            <h3>C Declarations</h3>
            <ul>
                <li id="C_Variable">
                    <h4>C_Variable</h4>
                    <p>
                        Structure for variables.
                    </p>
                    <pre><code>typedef struct C_Variable {
    char *Name;
    char *Value;
    bool IsPublic;
} C_Variable, *C_PVariable;</code></pre>
                <ul>
                    <li><code>Name</code>: Variable name.</li>
                    <li><code>Value</code>: Variable value.</li>
                    <li><code>IsPublic</code>: Visibility flag.</li>
                </ul>
                </li>
                <li id="_C_Variable_Arr">
                    <h4>_C_Variable_Arr</h4>
                    <p>
                        Structure for variable arrays.
                    </p>
<pre><code>typedef struct _C_Variable_Arr {
C_Variable *Variables;
uint64_t VariableCount;
} C_Variable_Arr, *C_PVariable_Arr;</code></pre>
                <ul>
                    <li><code>Variables</code>: Array of variables.</li>
                    <li><code>VariableCount</code>: Number of variables.</li>
                </ul>
                </li>
                
                <li id="C_Key">
                    <h4>C_Key</h4>
                    <p>
                        Structure for keys.
                    </p>
<pre><code>typedef struct C_Key {
    char *Name;
    char *Value;
} C_Key, *C_PKey;</code></pre>
                <ul>
                    <li><code>Name</code>: Key name.</li>
                    <li><code>Value</code>: Key value.</li>
                </ul>
                </li>
                <li id="C_Block">
                    <h4>C_Block</h4>
                    <p>
                        Structure for blocks.
                    </p>
<pre><code>typedef struct _C_Block {
    char *Name;
    C_Key *Keys;
    uint64_t KeyCount;
} C_Block, *C_PBlock;</code></pre>
                <ul>
                    <li><code>Name</code>: Block name.</li>
                    <li><code>Keys</code>: Array of keys.</li>
                    <li><code>KeyCount</code>: Number of keys.</li>
                </ul>
                </li>
                <li id="_C_Block_Arr">
                    <h4>_C_Block_Arr</h4>
                    <p>
                        Structure for block arrays.
                    </p>
<pre><code>typedef struct _C_Block_Arr {
    C_Block *Blocks;
    uint64_t BlockCount;
} C_Block_Arr, *C_PBlock_Arr;
</code></pre>
                <ul>
                    <li><code>Blocks</code>: Array of blocks.</li>
                    <li><code>BlockCount</code>: Number of blocks.</li>
                </ul>
                </li>
                <li id="_ATRCFiledata">
                    <h4>_ATRCFiledata</h4>
                    <p>
                        Structure for ATRC file data.
                    </p>
<pre><code>typedef struct _ATRCFiledata{
    C_PVariable_Arr Variables;
    C_PBlock_Arr Blocks;
    char *Filename;
    bool AutoSave;
    bool Writecheck;
} C_ATRC_FD, *C_PATRC_FD;</code></pre>
                <ul>
                    <li><code>Variables</code>: Array of variables.</li>
                    <li><code>Blocks</code>: Array of blocks.</li>
                    <li><code>Filename</code>: File name.</li>
                    <li><code>AutoSave</code>: Auto-save flag. Default: <code>false</code>.</li>
                    <li><code>Writecheck</code>: If status is <code>true</code>, creates new keys, blocks or variables when modifying a value. Default: <code>false</code></li>
                </ul>
                </li>
            </ul>

            <h3>C++ Declarations</h3>
            <ul>
                <li id="Variable">
                    <h4>Variable</h4>
                    <p>
                        Structure for variables.
                    </p>
<pre><code>typedef struct ATRC_API Variable {
    std::string Name;
    std::string Value;
    bool IsPublic = true;
} Variable, * PVariable;</code></pre>
                <ul>
                    <li><code>Name</code>: Variable name.</li>
                    <li><code>Value</code>: Variable value.</li>
                    <li><code>IsPublic</code>: Visibility flag.</li>
                </ul>
                </li>
                <li id="Key">
                    <h4>Key</h4>
                    <p>
                        Structure for keys.
                    </p>
<pre><code>typedef struct ATRC_API Key {
    std::string Name;
    std::string Value;
} Key, * PKey;</code></pre>
                <ul>
                    <li><code>Name</code>: Key name.</li>
                    <li><code>Value</code>: Key value.</li>
                </ul>
                </li>
                <li id="_Block">
                    <h4>_Block</h4>
                    <p>
                        Structure for blocks.
                    </p>
<pre><code>typedef struct ATRC_API _Block {
    std::string Name;
    std::vector<Key> Keys;
} Block, * PBlock;</code></pre>
                <ul>
                    <li><code>Name</code>: Block name.</li>
                    <li><code>Keys</code>: Vector of keys.</li>
                </ul>
                </li>
                <li id="ATRC_FD">
                    <h4>ATRC_FD</h4>
                    <p>
                        ATRC file data class
                    </p>
<pre><code>class ATRC_API ATRC_FD {
    public:
        ATRC_FD();
        ATRC_FD(const char* path);
        ATRC_FD(C_PATRC_FD filedata);
        ~ATRC_FD();
        bool Read();
        std::string ReadVariable(const std::string& varname);
        std::string ReadKey(const std::string& block, const std::string& key);
        bool DoesExistBlock(const std::string& block);
        bool DoesExistVariable(const std::string& varname);
        bool DoesExistKey(const std::string& block, const std::string& key);
        bool IsPublic(const std::string& varname);
        void InsertVar(std::string& line, std::vector<std::string>& args);
        std::string InsertVar_S(const std::string& line, std::vector<std::string>& args);
        bool AddBlock(const std::string& blockname);
        bool RemoveBlock(const std::string& blockname);
        bool AddVariable(const std::string& varname, const std::string& value);
        bool RemoveVariable(const std::string& varname);
        bool ModifyVariable(const std::string& varname, const std::string& value);
        bool AddKey(const std::string& block, const std::string& key, const std::string& value);
        bool RemoveKey(const std::string& block, const std::string& key);
        bool ModifyKey(const std::string& block, const std::string& key, const std::string& value);
        C_PATRC_FD ToCStruct();

        bool CheckStatus();

        std::vector<Variable>* GetVariables();
        std::vector<Block>* GetBlocks();
        std::string GetFilename();
        bool GetAutoSave() const;
        void SetAutoSave(bool autosave);
        bool GetWriteCheck() const;
        void SetWriteCheck(bool writecheck);

        PROXY_ATRC_FD operator[](const std::string& key);
        PROXY_ATRC_FD operator[](const std::string& key) const;

    private:
        void MAINCONSTRUCTOR();
        bool AutoSave;
        bool Writecheck;
        std::unique_ptr<std::vector<Variable>> Variables;
        std::unique_ptr<std::vector<Block>> Blocks;
        std::string Filename;
    };
typedef ATRC_FD* PATRC_FD;</code></pre>
                <p>More on functions in the <a href="#CPP_functions">C++ Member Functions</a> section.</p>
                <ul>
                    <li><code>AutoSave</code>: Auto-save flag. Default: <code>false</code>.</li>
                    <li><code>Writecheck</code>: If status is <code>true</code>, creates new keys, blocks or variables when modifying a value. Default: <code>false</code></li>
                    <li><code>Variables</code>: Vector of variables.</li>
                    <li><code>Blocks</code>: Vector of blocks.</li>
                    <li><code>Filename</code>: File name.</li>
                </ul>
                </li>
                
                <li id="PROXY_ATRC_FD">
                    <h4>PROXY_ATRC_FD</h4>
                    <p>
                        Proxy class for ATRC file data. Used for operator overloading.
                    </p>
                    
<pre><code>class ATRC_API PROXY_ATRC_FD {
public:
    PROXY_ATRC_FD(ATRC_FD& fd, const std::string& key);
    PROXY_ATRC_FD operator[](const std::string& subKey);
    operator std::string() const;
    PROXY_ATRC_FD& operator=(const std::string& value);    
    PROXY_ATRC_FD& operator>>(const std::string& value);
    PROXY_ATRC_FD& operator>>(const char* value);

    inline friend std::ostream& operator<<(std::ostream& os, const PROXY_ATRC_FD& obj) {
        uint64_t x = obj.key.find("]");
        if(x == std::string::npos) os << obj.fd->ReadVariable(obj.key);
        else {
            std::string block = obj.key.substr(0, x);
            std::string key_ = obj.key.substr(x + 1, obj.key.size() - x - 1);
            os << obj.fd->ReadKey(block, key_);
        }
        return os;
    }
private:
    PATRC_FD fd;
    std::string key;
};</code></pre>
                <p>More on functions in the <a href="#CPP_functions">C++ Member Functions</a> section.</p></p>
                <ul>
                    <li><code>fd</code>: ATRC file data pointer.</li>
                    <li><code>key</code>: Key name.</li>
                </ul>
                </li>
            </ul>
        </section>

        <section id="functions">
            <h2 id="C_functions">Functions</h2>
            <h3>C Functions</h3>
            <ul>
                <li id="C_Read">
                    <h4>Read</h4>
                    <p>Reads contents from a file</p>
                    <pre><code>ATRC_API bool Read(C_PATRC_FD self, const char* path, ReadMode readMode = ATRC_READ_ONLY);
                    </code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>filedata</code>: ATRC file data pointer.</li>
                        <li><code>filepath</code>: File path.</li>
                        <li><code>readMode</code>: Read mode.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Reads the contents of a file into an ATRC file data structure.
                        If the function fails, the file data structure is cleared. and the function returns <code>false</code>, new data structure needs to be created.
                        See <a href="#ReadMode">ReadMode</a> for more information on read modes.
                    </p>
                </li>

                <li id="C_ReadVariable">
                    <h4>ReadVariable</h4>
                    <p>Reads a variable from a file</p>
                    <pre><code>char* ReadVariable(C_PATRC_FD filedata, const char* varname);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>filedata</code>: ATRC file data pointer.</li>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Variable value.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Reads the value of a variable from a file.
                        Doesn't check if the variable is public or if it exists beforehand.
                        If the variable does not exist, the function returns <code>NULL</code>.
                        If unauthorized access is attempted, the function returns <code>NULL</code> and logs an error.
                    </p>
                </li>
                <li id="C_ReadKey">
                    <h4>ReadKey</h4>
                    <p>Reads a key from a file</p>
                    <pre><code>ATRC_API const char* ReadKey(C_PATRC_FD self, const char* block, const char* key);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Key value.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Reads the value of a key from a file.
                        Doesn't check if the key or block exists beforehand.
                        If the key does not exist, the function returns <code>NULL</code>.
                    </p>
                </li>
                <li id="C_DoesExistBlock">
                    <h4>DoesExistBlock</h4>
                    <p>Checks if a block exists in a file.</p>
                    <pre><code>ATRC_API bool DoesExistBlock(C_PATRC_FD self, const char* block);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>block</code>: Block name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if the block exists, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Checks if a block exists in a file.
                    </p>
                </li>
                <li id="C_DoesExistVariable">
                    <h4>DoesExistVariable</h4>
                    <p>
                        Checks if a variable exists in a file.
                    </p>
                    <pre><code>ATRC_API bool DoesExistVariable(C_PATRC_FD self, const char* varname);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if the variable exists, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Checks if a variable exists in a file.
                    </p>
                </li>
                <li id="C_DoesExistKey">
                    <h4>DoesExistKey</h4>
                    <p>
                        Checks if a key exists in a file.
                    </p>
                    <pre><code>ATRC_API bool DoesExistKey(C_PATRC_FD self, const char* block, const char* key);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if the key exists, <code>false</code> otherwise.</li>
                        <li><code>false</code> if the block does not exist.</li>
                    </ul>
                </li>
                <li id="C_IsPublic">
                    <h4>IsPublic</h4>
                    <p>Checks if a variable is public.  </p>
                    <pre><code>ATRC_API bool IsPublic(C_PATRC_FD self, const char* varname);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if the variable is public, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Checks if a variable is public.
                    </p>
                </li>
                <li id="C_InsertVar_S">
                    <h4>InsertVar_S</h4>
                    <p>
                        Inserts a value into a string containing inject markings. See <a href="#syntax_Insert">Insert/Inject marking</a> for syntax.
                    </p>
                    <pre><code>ATRC_API char* InsertVar_S(const char* line, const char** args)</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>line</code>: String containing inject markings.</li>
                        <li><code>args</code>: Array of arguments, null terminated.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Heap allocated string with injected values.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Inserts values into a string containing inject markings.
                        Return value needs to be freed with.
                        Insert array must be null terminated.
                    </p>
                    <h5>Example</h5>
<pre><code>const char* line = ReadVariable(fd, "test"); // "%*% %*%"
const char* args[] = { "test", "test", NULL };
char* res = InsertVar_S(line, args);
if (res == NULL) {
    printf("InsertVar_S: Failed to insert variables\n");
    return;
}
printf("InsertVar_S: '%s'\n", res); // Output: 'test test'
free(res);</code></pre>
                </li>
                <li id="C_AddBlock">
                    <h4>AddBlock</h4>
                    <p>
                        Adds a block to a file.
                    </p>
                    <pre><code>ATRC_API bool AddBlock(C_PATRC_FD self, const char* blockname);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>blockname</code>: Block name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Adds a block to a file.
                        Checks if the block already exists before creating.
                        If <code>AutoSave</code> is enabled, the block is added to the bottom of the file.
                    </p>
                </li>
                <li id="C_RemoveBlock">
                    <h4>RemoveBlock</h4>
                    <p>
                        Removes a block from a file.
                    </p>
                    <pre><code>ATRC_API bool RemoveBlock(C_PATRC_FD self, const char* blockname);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>blockname</code>: Block name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Removes a block from a file.
                        Checks if the block exists before removing.
                        If <code>AutoSave</code> is enabled, everything after the block is removed, until next block is found or EOF is encountered.
                    </p>
                </li>
                <li id="C_AddVariable">
                    <h4>AddVariable</h4>
                    <p>
                        Adds a variable to a file.
                    </p>
                    <pre><code>ATRC_API bool AddVariable(C_PATRC_FD self, const char* varname, const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>varname</code>: Variable name.</li>
                        <li><code>value</code>: Variable value.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Adds a variable to a file.
                        Checks if the variable already exists before creating.
                        If <code>AutoSave</code> is enabled, the variable is added to the second line of the file.
                    </p>
                </li>
                <li id="C_RemoveVariable">
                    <h4>RemoveVariable</h4>
                    <p>
                        Removes a variable from a file.
                    </p>
                    <pre><code>ATRC_API bool RemoveVariable(C_PATRC_FD self, const char* varname);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Removes a variable from a file.
                        Checks if the variable exists before removing.
                        If <code>AutoSave</code> is enabled, the variable is removed from the file.
                    </p>
                </li>
                <li id="C_ModifyVariable">
                    <h4>ModifyVariable</h4>
                    <p>
                        Modifies a variable in a file.
                    </p>
                    <pre><code>ATRC_API bool ModifyVariable(C_PATRC_FD self, const char* varname, const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>varname</code>: Variable name.</li>
                        <li><code>value</code>: Variable value.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Modifies a variable in a file.
                        Checks if the variable exists before modifying.
                        If <code>AutoSave</code> is enabled, the variable is modified in the file.
                    </p>
                </li>
                <li id="C_AddKey">
                    <h4>AddKey</h4>
                    <p>
                        Adds a key to a block in a file.
                    </p>
                    <pre><code>ATRC_API bool AddKey(C_PATRC_FD self, const char* block, const char* key, const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                        <li><code>value</code>: Key value.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Adds a key to a block in a file.
                        Checks if the block exists before adding the key.
                        Checks if the key already exists before creating.
                        If <code>AutoSave</code> is enabled, the key is added to the block in the file.
                    </p>
                </li>
                <li id="C_RemoveKey">
                    <h4>RemoveKey</h4>
                    <p>
                        Removes a key from a block in a file.
                    </p>
                    <pre><code>ATRC_API bool RemoveKey(C_PATRC_FD self, const char* block, const char* key);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Removes a key from a block in a file.
                        Checks if the block and key exist before removing.
                        If <code>AutoSave</code> is enabled, the key is removed from the block in the file.
                    </p>
                </li>
                <li id="C_ModifyKey"> 
                    <h4>ModifyKey</h4>
                    <p>
                        Modifies a key in a block in a file.
                    </p>
                    <pre><code>ATRC_API bool ModifyKey(C_PATRC_FD self, const char* block, const char* key, const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>self</code>: ATRC file data pointer.</li>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                        <li><code>value</code>: Key value.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Modifies a key in a block in a file.
                        Checks if the block and key exist before modifying.
                        If <code>AutoSave</code> is enabled, the key is modified in the block in the file.
                    </p>
                </li>
                <li id="C_Create_ATRC_FD">
                    <h4>Create_ATRC_FD</h4>
                    <p>
                        Creates an ATRC file data structure from a file.
                    </p>
                    <pre><code>ATRC_API C_PATRC_FD Create_ATRC_FD(char *filename, ReadMode readMode);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>filename</code>: File name.</li>
                        <li><code>readMode</code>: Read mode.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>ATRC file data pointer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Creates an ATRC file data structure from a file.
                        Free memory with <a href="#C_Destroy_ATRC_FD">Destroy_ATRC_FD</a>.
                        See <a href="#ReadMode">ReadMode</a> for more information on read modes.
                    </p>
                </li>
                <li id="C_Create_Empty_ATRC_FD">
                    <h4>Create_Empty_ATRC_FD</h4>
                    <p>
                        Creates an empty ATRC file data structure.
                    </p>
                    <pre><code>ATRC_API C_PATRC_FD Create_Empty_ATRC_FD();</code></pre>
                    <h5>Returns</h5>
                    <ul>
                        <li>ATRC file data pointer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Creates an empty ATRC file data structure.
                        Free memory with <a href="#C_Destroy_ATRC_FD">Destroy_ATRC_FD</a>.
                    </p>
                </li>
                <li id="C_Destroy_ATRC_FD_Blocks_And_Keys">
                    <h4>Destroy_ATRC_FD_Blocks_And_Keys</h4>
                    <p>
                        Frees blocks and keys in an ATRC file data structure.
                    </p>
                    <pre><code>ATRC_API void Destroy_ATRC_FD_Blocks_And_Keys(C_PATRC_FD filedata);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>filedata</code>: ATRC file data pointer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Frees blocks and keys in an ATRC file data structure.
                    </p>
                </li>
                <li id="C_Destroy_ATRC_FD_Variables">
                    <h4>Destroy_ATRC_FD_Variables</h4>
                    <p>
                        Frees variables in an ATRC file data structure.
                    </p>
                    <pre><code>ATRC_API void Destroy_ATRC_FD_Variables(C_PATRC_FD filedata);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>filedata</code>: ATRC file data pointer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Frees variables in an ATRC file data structure.
                    </p>
                </li>
                <li id="C_Destroy_ATRC_FD">
                    <h4>Destroy_ATRC_FD</h4>
                    <p>
                        Frees an ATRC file data structure.
                    </p>
                    <pre><code>ATRC_API void Destroy_ATRC_FD(C_PATRC_FD filedata);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>filedata</code>: ATRC file data pointer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Frees an ATRC file data structure.
                    </p>
                </li>
            </ul>


            <h2 id="CPP_functions">C++ Member Functions</h3>
            <h3 id="CPP_ATRC_FD">ATRC_FD</h4>
            <ul>
                <li id="ATRC_FD_Constructor1">
                    <h4>ATRC_FD</h4>
                    <p>
                        Default constructor.
                    </p>
                    <pre><code>ATRC_FD();</code></pre>
                    <h4>Remarks</h4>
                    <p>
                        Initializes an ATRC file data structure.
                    </p>
                </li>
                <li id="ATRC_FD_Constructor2">
                    <h4>ATRC_FD</h4>
                    <p>
                        Constructor with file path.
                    </p>
                    <pre><code>ATRC_FD(const char* path, ReadMode mode = ATRC_READ_ONLY);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>path</code>: File path.</li>
                        <li><code>mode</code>: Read mode.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Initializes an ATRC file data structure and reads the file.
                        See <a href="#ReadMode">ReadMode</a> for more information on read modes.
                    </p>
                </li>
                <li id="ATRC_FD_Constructor3">
                    <h4>ATRC_FD</h4>
                    <p>
                        Constructor with C structure.
                    </p>
                    <pre><code>ATRC_FD(C_PATRC_FD filedata);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>filedata</code>: C structure pointer.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Initializes an ATRC file data structure from a C structure.
                        C structure needs to be freed manually.
                    </p>
                </li>
                <li id="ATRC_FD_Destructor">
                    <h4>~ATRC_FD</h4>
                    <p>
                        Destructor.
                    </p>
                    <pre><code>~ATRC_FD();</code></pre>
                    <h4>Remarks</h4>
                    <p>
                        Frees an ATRC file data structure.
                    </p>
                </li>
                <li id="ATRC_FD_Read">
                    <h4>Read</h4>
                    <p>
                        Reads a file.
                    </p>
                    <pre><code>bool Read(ReadMode mode);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>mode</code>: Read mode.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Reads a file into an ATRC file data structure.
                        See <a href="#ReadMode">ReadMode</a> for more information on read modes.
                    </p>
                </li>
                <li id="ATRC_FD_ReadVariable">
                    <h4>ReadVariable</h4>
                    <p>
                        Reads a variable from a file.
                    </p>
                    <pre><code>std::string ReadVariable(const std::string& varname);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Variable value.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Reads the value of a variable from a file.
                        Doesn't check if the variable is public or if it exists beforehand.
                        If the variable does not exist, the function returns <code>""</code>.
                        If unauthorized access is attempted, the function returns <code>""</code> and logs an error.
                    </p>
                </li>
                <li id="ATRC_FD_ReadKey">
                    <h4>ReadKey</h4>
                    <p>
                        Reads a key from a file.
                    </p>
                    <pre><code>std::string ReadKey(const std::string& block, const std::string& key);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Key value.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Reads the value of a key from a file.
                        Doesn't check if the key or block exists beforehand.
                        If the key does not exist, the function returns <code>""</code>.
                    </p>
                </li>
                <li id="ATRC_FD_DoesExistBlock">
                    <h4>DoesExistBlock</h4>
                    <p>
                        Checks if a block exists in a file.
                    </p>
                    <pre><code>bool DoesExistBlock(const std::string& block);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>block</code>: Block name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if the block exists, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Checks if a block exists in a file.
                    </p>
                </li>
                <li id="ATRC_FD_DoesExistVariable">
                    <h4>DoesExistVariable</h4>
                    <p>
                        Checks if a variable exists in a file.
                    </p>
                    <pre><code>bool DoesExistVariable(const std::string& varname);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if the variable exists, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Checks if a variable exists in a file.
                    </p>
                </li>
                <li id="ATRC_FD_DoesExistKey">
                    <h4>DoesExistKey</h4>
                    <p>
                        Checks if a key exists in a file.
                    </p>
                    <pre><code>bool DoesExistKey(const std::string& block, const std::string& key);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if the key exists, <code>false</code> otherwise.</li>
                        <li><code>false</code> if the block does not exist.</li>
                    </ul>
                </li>
                <li id="ATRC_FD_IsPublic">
                    <h4>IsPublic</h4>
                    <p>
                        Checks if a variable is public.
                    </p>
                    <pre><code>bool IsPublic(const std::string& varname);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if the variable is public, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Checks if a variable is public.
                    </p>
                </li>
                <li id="ATRC_FD_InsertVar">
                    <h4>InsertVar</h4>
                    <p>
                        Inserts a value into a string containing inject markings. See <a href="#syntax_Insert">Insert/Inject marking</a> for syntax.
                    </p>
                    <pre><code>void InsertVar(std::string& line, std::vector<std::string>& args);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>line</code>: String containing inject markings.</li>
                        <li><code>args</code>: Vector of arguments.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Inserts values into a string containing inject markings.
                        Result is stored in <code>line</code>.
                    </p>
                </li>
                <li id="ATRC_FD_InsertVar_S">
                    <h4>InsertVar_S</h4>
                    <p>
                        Inserts a value into a string containing inject markings. See <a href="#syntax_Insert">Insert/Inject marking</a> for syntax.
                    </p>
                    <pre><code>std::string InsertVar_S(const std::string& line, std::vector<std::string>& args);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>line</code>: String containing inject markings.</li>
                        <li><code>args</code>: Vector of arguments.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>String with injected values.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Inserts values into a string containing inject markings.
                    </p>
                </li>
                <li id="ATRC_FD_AddBlock">
                    <h4>AddBlock</h4>
                    <p>
                        Adds a block to a file.
                    </p>
                    <pre><code>bool AddBlock(const std::string& blockname);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>blockname</code>: Block name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Adds a block to a file.
                        Checks if the block already exists before creating.
                        If <code>AutoSave</code> is enabled, the block is added to the bottom of the file.
                    </p>
                </li>
                <li id="ATRC_FD_RemoveBlock">
                    <h4>RemoveBlock</h4>
                    <p>
                        Removes a block from a file.
                    </p>
                    <pre><code>bool RemoveBlock(const std::string& blockname);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>blockname</code>: Block name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Removes a block from a file.
                        Checks if the block exists before removing.
                        If <code>AutoSave</code> is enabled, everything after the block is removed, until next block is found or EOF is encountered.
                    </p>
                </li>
                <li id="ATRC_FD_AddVariable">
                    <h4>AddVariable</h4>
                    <p>
                        Adds a variable to a file.
                    </p>
                    <pre><code>bool AddVariable(const std::string& varname, const std::string& value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>varname</code>: Variable name.</li>
                        <li><code>value</code>: Variable value.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Adds a variable to a file.
                        Checks if the variable already exists before creating.
                        If <code>AutoSave</code> is enabled, the variable is added to the second line of the file.
                    </p>
                </li>
                <li id="ATRC_FD_RemoveVariable">
                    <h4>RemoveVariable</h4>
                    <p>
                        Removes a variable from a file.
                    </p>
                    <pre><code>bool RemoveVariable(const std::string& varname);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>varname</code>: Variable name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Removes a variable from a file.
                        Checks if the variable exists before removing.
                        If <code>AutoSave</code> is enabled, the variable is removed from the file.
                    </p>
                </li>
                <li id="ATRC_FD_ModifyVariable">
                    <h4>ModifyVariable</h4>
                    <p>
                        Modifies a variable in a file.
                    </p>
                    <pre><code>bool ModifyVariable(const std::string& varname, const std::string& value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>varname</code>: Variable name.</li>
                        <li><code>value</code>: Variable value.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Modifies a variable in a file.
                        Checks if the variable exists before modifying.
                        If <code>AutoSave</code> is enabled, the variable is modified in the file.
                    </p>
                </li>
                <li id="ATRC_FD_AddKey">
                    <h4>AddKey</h4>
                    <p>
                        Adds a key to a block in a file.
                    </p>
                    <pre><code>bool AddKey(const std::string& block, const std::string& key, const std::string& value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                        <li><code>value</code>: Key value.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Adds a key to a block in a file.
                        Checks if the block exists before adding the key.
                        Checks if the key already exists before creating.
                        If <code>AutoSave</code> is enabled, the key is added to the block in the file.
                    </p>
                </li>
                <li id="ATRC_FD_RemoveKey">
                    <h4>RemoveKey</h4>
                    <p>
                        Removes a key from a block in a file.
                    </p>
                    <pre><code>bool RemoveKey(const std::string& block, const std::string& key);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Removes a key from a block in a file.
                        Checks if the block and key exist before removing.
                        If <code>AutoSave</code> is enabled, the key is removed from the block in the file.
                    </p>
                </li>
                <li id="ATRC_FD_ModifyKey">
                    <h4>ModifyKey</h4>
                    <p>
                        Modifies a key in a block in a file.
                    </p>
                    <pre><code>bool ModifyKey(const std::string& block, const std::string& key, const std::string& value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>block</code>: Block name.</li>
                        <li><code>key</code>: Key name.</li>
                        <li><code>value</code>: Key value.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if successful, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Modifies a key in a block in a file.
                        Checks if the block and key exist before modifying.
                        If <code>AutoSave</code> is enabled, the key is modified in the block in the file.
                    </p>
                </li>
                <li id="ATRC_FD_ToCStruct">
                    <h4>ToCStruct</h4>
                    <p>
                        Converts an ATRC file data structure to a C structure.
                    </p>
                    <pre><code>C_PATRC_FD ToCStruct();</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>C structure pointer.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Converts an ATRC file data structure to a C structure.
                        C structure needs to be freed manually.
                    </p>
                </li>
                <li id="ATRC_FD_CheckStatus">
                    <h4>CheckStatus</h4>
                    <p>
                        Checks the status of the ATRC file data class instance.
                    </p>
                    <pre><code>bool CheckStatus();</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if the file is parsed succesfully, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Checks the status of the ATRC_FD class instance.
                    </p>
                </li>
                <li id="ATRC_FD_GetVariables">
                    <h4>GetVariables</h4>
                    <p>
                        Gets a list of variables in a file.
                    </p>
                    <pre><code>std::vector<std::string> GetVariables();</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>Vector of variable names.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets a list of variables in a file.
                    </p>
                </li>
                <li id="ATRC_FD_GetBlocks">
                    <h4>GetBlocks</h4>
                    <p>
                        Gets a list of blocks in a file.
                    </p>
                    <pre><code>std::vector<std::string> GetBlocks();</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>Vector of block names.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets a list of blocks in a file.
                    </p>
                </li>
                <li id="ATRC_FD_GetFilename">
                    <h4>GetFilename</h4>
                    <p>
                        Gets the file name.
                    </p>
                    <pre><code>std::string GetFilename();</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>File name.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets the file name.
                    </p>
                </li>
                <li id="ATRC_FD_GetAutoSave">
                    <h4>GetAutoSave</h4>
                    <p>
                        Gets the AutoSave setting.
                    </p>
                    <pre><code>bool GetAutoSave();</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li><code>true</code> if AutoSave is enabled, <code>false</code> otherwise.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets the AutoSave setting.
                    </p>
                </li>
                <li id="ATRC_FD_SetAutoSave">
                    <h4>SetAutoSave</h4>
                    <p>
                        Sets the AutoSave setting.
                    </p>
                    <pre><code>void SetAutoSave(bool autosave);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>autosave</code>: AutoSave setting.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Sets the AutoSave setting.
                    </p>
                </li>
                <li id="ATRC_FD_GetWriteCheck">
                    <h4>GetWriteCheck</h4>
                    <p>
                        Gets the WriteCheck setting.
                    </p>
                    <pre><code>bool GetWriteCheck() const;</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>Status of <code>Writecheck</code>.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets the WriteCheck setting.
                        See <a href="#ATRC_FD">ATRC_FD</a> for more information.
                    </p>
                </li>
                <li id="ATRC_FD_SetWriteCheck">
                    <h4>SetWriteCheck</h4>
                    <p>
                        Sets the WriteCheck setting.
                    </p>
                    <pre><code>void SetWriteCheck(bool writecheck);</code></pre>
                    <h4>Remarks</h4>
                    <p>
                        Sets the WriteCheck setting.
                        See <a href="#ATRC_FD">ATRC_FD</a> for more information.
                    </p>

                </li>
                <li id="ATRC_FD_operator_arr1">
                    <h4>operator[]</h4>
                    <p>
                        Gets a variable or key value.
                    </p>
                    <pre><code>PROXY_ATRC_FD operator[](const std::string& key);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Variable or key value.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets a variable or key value.
                    </p>
                </li>
                <li id="ATRC_FD_operator_arr2">
                    <h4>operator[]</h4>
                    <p>
                        Gets a block. 
                    </p>
                    <pre><code>PROXY_ATRC_FD operator[](const std::string& key) const;</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>key</code>: Block name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Block.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets a block.
                    </p>
                </li>
            </ul>
            <h3>PROXY_ATRC_FD</h3>
            <ul>
                <li id="PROXY_ATRC_FD_Default_constructor">
                    <h4>PROXY_ATRC_FD</h4>
                    <p>
                        Default constructor.
                    </p>
                    <pre><code>PROXY_ATRC_FD(ATRC_FD& fd, const std::string& key);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>fd</code>: ATRC file data structure.</li>
                        <li><code>key</code>: Key name.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Initializes a proxy ATRC file data structure.
                    </p>
                </li>
                <li id="PROXY_ATRC_FD_operator_arr">
                    <h4>operator[]</h4>
                    <p>
                        Gets a variable or key value.
                    </p>
                    <pre><code>PROXY_ATRC_FD operator[](const std::string& subKey);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>subKey</code>: Key name.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Variable or key value.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Gets a variable or key value.
                    </p>
                </li>
                <li id="PROXY_ATRC_FD_operator_str">
                    <h4>operator std::string</h4>
                    <p>
                        Converts the value to a string.
                    </p>
                    <pre><code>operator std::string() const;</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>Value as a string.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Converts the value to a string.
                    </p>
                </li>
                 <li id="PROXY_ATRC_FD_operator_char">
                    <h4>operator const char*</h4>
                    <p>
                        Converts the value to a C string.
                    </p>
                    <pre><code>operator const char*() const;</code></pre>
                    <h4>Returns</h4>
                    <ul>
                        <li>Value as a C string.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Converts the value to a C string.
                    </p>

                 </li>
                <li id="PROXY_ATRC_FD_operator_assign">
                    <h4>operator=</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                    <pre><code>PROXY_ATRC_FD& operator=(const std::string& value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>value</code>: Value to assign.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Reference to the proxy ATRC file data structure.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                </li>
                <li id="PROXY_ATRC_FD_operator_rshift1">
                    <h4>operator&gt;&gt;</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                    <pre><code>PROXY_ATRC_FD& operator>>(const std::string& value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>value</code>: Value to assign.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Reference to the proxy ATRC file data structure.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                </li>
                <li id="PROXY_ATRC_FD_operator_rshift2">
                    <h4>operator&gt;&gt;</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                    <pre><code>PROXY_ATRC_FD& operator>>(const char* value);</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>value</code>: Value to assign.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Reference to the proxy ATRC file data structure.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                </li>
                <li id="PROXY_ATRC_FD_operator_insertion">
                    <h4>operator&lt;&lt;</h4>
                    <p>
                        Outputs a variable or key value.
                    </p>
<pre><code>inline friend std::ostream& operator&lt;&lt;(std::ostream& os, const PROXY_ATRC_FD& obj) {
    uint64_t x = obj.key.find("]");
    if(x == std::string::npos) os &lt;&lt; obj.fd->ReadVariable(obj.key);
    else {
        std::string block = obj.key.substr(0, x);
        std::string key_ = obj.key.substr(x + 1, obj.key.size() - x - 1);
        os &lt;&lt; obj.fd->ReadKey(block, key_);
    }
    return os;
}</code></pre>
                    <h4>Arguments</h4>
                    <ul>
                        <li><code>os</code>: Output stream.</li>
                        <li><code>obj</code>: Proxy ATRC file data structure.</li>
                    </ul>
                    <h4>Returns</h4>
                    <ul>
                        <li>Output stream.</li>
                    </ul>
                    <h4>Remarks</h4>
                    <p>
                        Outputs a variable or key value.
                    </p>
                </li>
            </ul>
        </section>

        <section id="CPP_OPERATOR_HELP">
            <h2>Operator Overloading</h2>
            <ul>
                <li id="CPP_OPERATOR_HELP_READING">
                        <h3 >
                            Reading a value
                        </h3>
                        <code>operator[]</code>
                        <h4>Remarks</h4>
                        <p>
                            Gets a variable or key value.
                        </p>
                        <h4>Example</h4>
<pre><code>ATRC_FD fd("file.atrc");
std::string var = fd["variable"];
std::string key = fd["block"]["key"];</code></pre>
                </li>
                <li id="CPP_OPERATOR_HELP_ASSIGNING">
                    <h3 >
                        Assigning a value
                    </h3>
                    <code>operator=</code>
                    <h4>Remarks</h4>
                    <p>
                        Assigns a value to a variable or key.
                    </p>
                    <h4>Example</h4>
<pre><code>ATRC_FD fd("file.atrc");
fd["variable"] = "value";
fd["block"]["key"] = "value";</code></pre>
                </li>
                <li id="CPP_OPERATOR_HELP_APPENDING">
                    <h3 >
                        Appending a value
                    </h3>
                    <code>operator&gt;&gt;</code>
                    <h4>Remarks</h4>
                    <p>
                        Appends a value to a variable or key.
                    </p>
                    <h4>Example</h4>
<pre><code>ATRC_FD fd("file.atrc");
fd["variable"] &gt;&gt; "value";
fd["block"]["key"] &gt;&gt; "value";</code></pre>
                </li>
                <li id="CPP_OPERATOR_HELP_COUTING">
                    <h3 >
                        Outputting a value
                    </h3>
                    <code>operator&lt;&lt;</code>
                    <h4>Remarks</h4>
                    <p>
                        Outputs a variable or key value.
                    </p>
                    <h4>Example</h4>
<pre><code>ATRC_FD fd("file.atrc");
std::cout &lt;&lt; fd["variable"] &lt;&lt; std::endl;
std::cout &lt;&lt; fd["block"]["key"] &lt;&lt; std::endl;</code></pre>
                </li>
            </ul>

        </section>
        <section id="stdlib">
            <h2>ATRC Standard Library</h2>
            <h3>Overview</h3>
            <p>The ATRC standard library provides utility functions for data conversion and manipulation.</p>
            <h3 id="stdlib_data_structures">
                Data structures, enumerations, and global variables
            </h3>
            <ul>
                <li id="stdlib_ATRC_ERR">
                    <h4>ATRC_ERR</h4>
                    <p>
                        Error enumeration.
                    </p>
<pre><code>enum ATRC_ERR {
    _ATRC_SUCCESSFULL_ACTION = 0,
    _ATRC_UNSUCCESSFULL_ACTION = 1
};</code></pre>
                    <h5>Values</h5>
                    <ul>
                        <li><code>_ATRC_SUCCESSFULL_ACTION</code>: Successful action.</li>
                        <li><code>_ATRC_UNSUCCESSFULL_ACTION</code>: Unsuccessful action.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Error enumeration.
                    </p>                    
                </li>
                <li id="stdlib_atrc_stdlib_errval">
                    <h4>atrc_stdlib_errval</h4>
                    <p>
                        Global error value.
                    </p>
                    <pre><code>extern uint64_t atrc_stdlib_errval;</code></pre>
                    <h5>Remarks</h5>
                    <p>
                        Global error value, used to store the last error code for stdlib functions.
                        Every stdlib function sets this value, _ATRC_SUCCESSFULL_ACTION if succesfull, _ATRC_UNSUCCESSFULL_ACTION otherwise.
                    </p>
                </li>
                <li id="stdlib__C_String_Arr">
                    <h4>_C_String_Arr</h4>
                    <p>
                        Array structure for C strings.
                    </p>
<pre><code>typedef struct _C_String_Arr {
    char **list;
    uint64_t count;
} C_String_Arr, *C_PString_Arr;</code></pre>
                </li>
                <h5>Members</h5>
                <ul>
                    <li><code>list</code>: Array of C strings.</li>
                    <li><code>count</code>: Number of strings in the array.</li>
                </ul>
                <h5>Remarks</h5>
                <p>
                    Array structure for C strings.
                </p>
            </ul>
            <h3 id="stdlib_functions">
                Functions
            </h3>
            <ul>
                <li id="stdlib_functions_atrc_to_vector">
                    <h4>atrc_to_vector</h4>
                    <p>
                        Converts a string to a vector of strings.
                    </p>
                    <pre><code>ATRC_API std::vector&lt;std::string&gt; atrc_to_vector(char separator, const std::string &amp;value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>separator</code>: Separator character.</li>
                        <li><code>value</code>: String to convert.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Vector of strings.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Converts a string to a vector of strings.
                    </p>
                </li>
                <li id="stdlib_functions_atrc_to_list">
                    <h4>atrc_to_list</h4>
                    <p>
                        Converts a string to a list of strings.
                    </p>
                    <pre><code>ATRC_API C_PString_Arr atrc_to_list(char separator, const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>separator</code>: Separator character.</li>
                        <li><code>value</code>: String to convert.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Array of C strings.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Converts a string to a list of strings.
                        Free the array with <a href="#stdlib_functions_atrc_free_list">stdlib_functions_atrc_free_list</a>
                    </p>
                </li>
                <li id="stdlib_functions_atrc_free_list">
                    <h4>atrc_free_list</h4>
                    <p>
                        Frees a list of strings.
                    </p>
                    <pre><code>ATRC_API void atrc_free_list(C_PString_Arr list);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>list</code>: Array of C strings.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Frees a list of strings.
                    </p>
                </li>
                <li id="stdlib_functions_atrc_to_bool">
                    <h4>atrc_to_bool</h4>
                    <p>
                        Converts a string to a boolean.
                    </p>
                    <pre><code>ATRC_API bool atrc_to_bool(const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>value</code>: String to convert.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Boolean value.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Converts a string to a boolean.
                        Accepts <code>"true|TRUE"</code>, <code>"false|FALSE"</code>, <code>"1"</code>, <code>"0"</code>.
                    </p>
                </li>
                <li id="stdlib_functions_atrc_to_uint64_t">
                    <h4>atrc_to_uint64_t</h4>
                    <p>
                        Converts a string to an unsigned 64-bit integer.
                    </p>
                    <pre><code>ATRC_API uint64_t atrc_to_uint64_t(const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>value</code>: String to convert.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Unsigned 64-bit integer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Converts a string to an unsigned 64-bit integer.
                    </p>
                </li>
                <li id="stdlib_functions_atrc_to_int64_t">
                    <h4>atrc_to_int64_t</h4>
                    <p>
                        Converts a string to a signed 64-bit integer.
                    </p>
                    <pre><code>ATRC_API int64_t atrc_to_int64_t(const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>value</code>: String to convert.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Signed 64-bit integer.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Converts a string to a signed 64-bit integer.
                    </p>
                </li>
                <li id="stdlib_functions_atrc_to_double">
                    <h4>atrc_to_double</h4>
                    <p>
                        Converts a string to a double.
                    </p>
                    <pre><code>ATRC_API double atrc_to_double(const char* value);</code></pre>
                    <h5>Arguments</h5>
                    <ul>
                        <li><code>value</code>: String to convert.</li>
                    </ul>
                    <h5>Returns</h5>
                    <ul>
                        <li>Double.</li>
                    </ul>
                    <h5>Remarks</h5>
                    <p>
                        Converts a string to a double.
                    </p>
                </li>
            </ul>
        </section>
    </main>
    <div id="back_to_top">
        <a href="#header">Back to top</a>
    </div>
    <footer>
        <p>&copy; 2024-2025 Antonako1</p>
    </footer>
</body>
</html>
