<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="ATRC C-CPP Documentation">
    <title>ATRC C-CPP Documentation</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header id="header">
        <h1>
            Welcome to the ATRC C-CPP Documentation for version 2.2.0
        </h1>
    </header>
    <nav>
        <ul>
            <li><a href="index.htm">Home</a></li>
            <li><a href="installation_guide.htm">Installation guide</a></li>
            <li><a href="api_reference.htm">API reference</a></li>
            <li><a href="https://github.com/Antonako1/ATRC" target="_blank">GitHub Project</a></li>
        </ul>
    </nav>
    <main>
        <h2>Welcome to the ATRC C-CPP Documentation</h2>
        <p>
            This documentation provides everything you need to integrate, install, and utilize the ATRC library for your C and C++ projects. Whether you're looking for a detailed installation guide or an exhaustive API reference, you'll find all the necessary information here.
        </p>
        <div class="btn-group">
            <a href="installation_guide.htm">Get Started</a>
            <a href="api_reference.htm">View API Reference</a>
            <a href="https://github.com/Antonako1/ATRC" target="_blank">Visit GitHub</a>
        </div>
        
        <section>
            <h2>Key Features</h2>
            <ul>
                <li>Read and write resource files in C and C++</li>
                <li>Simple and intuitive API</li>
                <li>Lightweight and efficient</li>
                <li>Cross platform support</li>
                <li>Open source and free to use</li>
                <li>Helpful built-in functionalities, such as 
                    <a href="api_reference.htm#syntax_Insert">variable injection</a>,
                    <a href="api_reference.htm#syntax_preprocessor">preprocessor directives</a>,
                    and much more</li>
            </ul>
        </section>

        <section>
            <h2>About ATRC</h2>
            <p>
                ATRC is a cross platform C and C++ resource file parser that allows you to easily read and write resource files in your projects. It provides a simple and intuitive API that makes it easy to integrate with your existing codebase. ATRC is designed to be lightweight, efficient, and easy to use, making it the perfect choice for developers looking to add resource file support to their applications. Whether you're working on a game, a multimedia application, or any other type of software that requires resource file support, ATRC has you covered. With ATRC, you can quickly and easily load and save resource files, access individual resources, and manage resource data in a way that is both flexible and powerful. ATRC is open source and free to use, so you can start using it in your projects today without any restrictions. 
            </p>
        </section>

        <section>
            <h2>Example resource file</h2>
<pre><code>#!ATRC
# DATA.ATRC
%operating_system%=Windows
%version%=10.0
%username%=placeholder

[userdata]
message_1=Hello, %username%!
message_2=Welcome to %operating_system% %version%!

# Injection: 0 = years, 1 = months, 2 = days, 3 = hours, 4 = minutes, 5 = seconds
message_3=Your current uptime is %*2*%.%*1*%.%*0*% %*3*%:%*4*%:%*5*%!</code></pre>
        </section>

        <section>
            <h2>Example program for C++</h2>
<pre><code>// MAIN.CPP
#include &lt;iostream&gt;
#include &lt;ATRC.h&gt;
int main() {
    atrc::ATRC_FD fd = atrc::ATRC_FD("file.atrc");

    if(!fd.CheckStatus()) {
        std::cout &lt;&lt; "File parsed unsuccesfully!" &lt;&lt; std::endl;
        return 1;
    }

    std::cout &lt;&lt; fd["var_name"] &lt;&lt; std::endl;
    if(fd["block_name"]["key"] == "") {
        std::cout &lt;&lt; "Key not found!" &lt;&lt; std::endl;
    }

    std::string line = fd["block_name"]["key"];
    std::vector&lt;std::string&gt; args = {"Hello everyone"};
    std::cout &lt;&lt; "Before: " &lt;&lt; line &lt;&lt; std::endl;
    std::string res = fd.InsertVar_S(line, args);
    std::cout &lt;&lt; "After: " &lt;&lt; res &lt;&lt; std::endl;
    
    return 0;
}</code></pre>
        </section>
        <section>
            <h2>Example program for C</h2>
<pre><code>// MAIN.C
#include "ATRC.h"
#include &lt;stdio.h&gt;
int main() {
    C_PATRC_FD filedata = Create_Empty_ATRC_FD();
    if (filedata == NULL) {
        printf("[FAIL] Create_Empty_ATRC_FD: Failed to create ATRC_FD\n");
        return 1;
    }

    if (!Read(filedata, "test.atrc", ATRC_READ_ONLY)) {
        printf("[FAIL] Read: Failed to read file 'test.atrc'\n");
        Destroy_ATRC_FD(filedata);
        return 1;
    }

    const char* varname = "test_variable";
    const char* value = ReadVariable(filedata, varname);
    if(value == NULL){
        printf("[FAIL] ReadVariable: Failed to read variable '%s'\n", varname);
    } else {
        printf("[PASS] ReadVariable: Value of '%s' is '%s'\n", varname, value);
    }

    const char* blockname = "test_block";
    if (AddBlock(filedata, blockname)) {
        printf("[PASS] AddBlock: Block '%s' added successfully\n", blockname);
    } else {
        printf("[FAIL] AddBlock: Failed to add block '%s'\n", blockname);
    }

    if (DoesExistBlock(filedata, blockname)) {
        printf("[PASS] DoesExistBlock: Block '%s' exists\n", blockname);
    } else {
        printf("[FAIL] DoesExistBlock: Block '%s' does not exist\n", blockname);
    }

    if (RemoveBlock(filedata, blockname)) {
        printf("[PASS] RemoveBlock: Block '%s' removed successfully\n", blockname);
    } else {
        printf("[FAIL] RemoveBlock: Failed to remove block '%s'\n", blockname);
    }

    Destroy_ATRC_FD(filedata);
    return 0;
}</code></pre>
        </section>
    </main>
    <div id="back_to_top">
        <a href="#header">Back to top</a>
    </div>
    <footer>
        <p>&copy; 2024-2025 Antonako1</p>
    </footer>
</body>
</html>
